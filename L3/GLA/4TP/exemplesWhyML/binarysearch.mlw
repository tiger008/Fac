module BinarySearch

use import int.Int
use import int.ComputerDivision
use import ref.Ref
use import array.Array

let binarysearch (t "model:1" : array int) (v "model:1" : int) : int =
  requires { forall i j :int. 0 <= i <= j < length t -> t[i] <= t[j] }
  ensures { 0 <= result < length t -> t[result] = v }
  ensures { result = -1 -> forall i:int. 0 <= i < length t -> t[i] <> v }
  let ind = ref (-1) in
  let l = ref 0 in
  let u = ref (length t - 1) in
  while (!l <= !u && !ind = -1) do
    invariant { 0 <= !l <= length t }
    invariant { -1 <= !u < length t }
    invariant { !l <= !u+1 }
    invariant { !ind = -1 -> forall j:int. 0 <= j < !l \/ !u < j < length t -> t[j] <> v }  
    invariant { !ind <> -1 -> t[!ind] = v }
    variant { !u - !l - !ind }
    let m = !l + div (!u - !l) 2 in
    if (t[m] < v)
    then l := m + 1
    else if (t[m] > v) 
         then u := m - 1
         else ind := m
  done;
  !ind

end
