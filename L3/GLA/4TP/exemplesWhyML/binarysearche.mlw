module BinarySearch

use import int.Int
use import int.ComputerDivision
use import ref.Ref
use import array.Array

exception Return int

let binarysearch (t : array int) (v : int) : int =
  requires { forall i j :int. 0 <= i <= j < length t -> t[i] <= t[j] }
  ensures { 0 <= result < length t -> t[result] = v }
  ensures { result = -1 -> forall i:int. 0 <= i < length t -> t[i] <> v }
  let l = ref 0 in
  let u = ref (length t - 1) in
  try while (!l <= !u) do
        invariant { 0 <= !l <= length t }
        invariant { -1 <= !u < length t }
        invariant { !l <= !u+1 }
        invariant { forall j:int. 0 <= j < !l \/ !u < j < length t -> t[j] <> v }  
        variant { !u - !l }
        let m = !l + div (!u - !l) 2 in
        if (t[m] < v)
        then l := m + 1
        else if (t[m] > v) 
             then u := m - 1
             else raise (Return m)
      done;
      -1
  with
      Return m -> m
  end

end
