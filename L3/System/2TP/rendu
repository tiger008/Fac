L3 - 2015
Thomas Perraut
mythom008@gmail.com
htts://github.com/tiger008

Exercice 1t

#1 Reponse : Un processus est un programme execute par un processeur.

#2 Reponse : Un processus se compose :
		> d'un ensemble d'instructions a executer charge vers la memoire vive;
		> d'un espace d'adressage pour stocker la pile, les variables
			temporaires du programme...;
		> de ressources telle que l'acces a l'environnement du parent et aux
			donnees globales.

#3 Reponse : Oui, d'ailleurs le systeme "choisi" les prochaines instructions a
		executer dans la liste des processus pret.

#4 Reponse : C'est une question tres ouverte, d'un cote, le noyau ne peu pas
		etre considere comme un processus mais comme un programme qui est
		partage a tous les processus. D'un autre cote, le systeme
		d'exploitation procede ses propres processus qui font partie integrante
		de celui-ci.
		Un systeme est donc commpose d'un programme principale et de plusieurs
		processus, on ne peut donc ni affirmer, ni infirmer que celui-ci soit
		lui meme un processus.

#5 Reponse : Les different avantages d'un processus mutil-thread cites sont :
	> La reactivite;
	> Le partage de ressource;
	> L'economie de temps;
	> Le parallelisme sur certaine architectures.

Exercice 2

#1

 systemd			//1
  |-login--bash--startx--xinit	//2
    |-sh--xfce4-session		//3
      |-xfce4-panel		//4
        |-terminator		//5
	      |-bash--pstree	//6

	//1 Gestionnaire des processus
	//2 Login et initialisation de la session graphique
	//3 Lancement de la session graphique utilise
	//4 Chargement des plugins et preference de la session
	//5 Emulateur de console
	//6 Notre commande lancee par bash

	Reponse : Dans un certain sens aucun, nous aurions pu lancer la
		commande dans une console non graphique. Neanmoins ici nous avons
		commence par lancer une session graphique, elle sera donc parente
		de tout processus aillant un affiche graphique comme notre
		emulateur de console graphique (ici terminator).

#2

	Code :
	#include <stdio.h>
	#define N 100000

	int main(void)
	{
		int i,j;

		for (i = 3; i <= N; i++)
		{
			j = 2;
			while ((j * j <= i) && (i % j != 0))
				j++;
			if (i % j != 0)
				printf("%d ", i);
		}
		printf("\n");
		return (0);
	}

	Reponse : Ce programme affiche tous les nombres premier entre 3 et 100000

#3
	Commande : time ./a.out
	Resultat :
	
	real	0m0.108s
	user	0m0.073s
	sys	0m0.000s

	Reponse : Il faut 0.073 sec pour trouver les nombres premiers entre 3 et 100000
		et 0.3 sec pour les afficher.

#4

	Code :
	#include <stdio.h>
	#include <sys/time.h>
	#define N 100000

	int main(void)
	{
		int i,j;
		long long elapsed;
		struct timeval tp;
		struct timeval tp1;

		gettimeofday(&tp, NULL);
		for (i = 3; i <= N; i++)
		{
			j = 2;
			while ((j * j <= i) && (i % j != 0))
				j++;
			if (i % j != 0)
				printf("%d ", i);
		}
		gettimeofday(&tp1, NULL);
		elapsed = (tp1.tv_sec - tp.tv_sec) * 1000000LL + tp1.tv_usec - tp.tv_usec;
		printf("\n\ntime=%ld\n", elapsed);

		return (0);
	}

	Commande : time ./a.out
	Resultat :
		time = 99638
		real	0m0.103s
		user	0m0.080s
		sys	0m0.003s

	Reponse : Le resultat obtenu est entre le temps "user" et "real" mais plus
		proche du "real".

#5
	Code :
	#include <stdio.h>
	#include <time.h>
	#define N 100000

	int main(void)
	{
		int i,j;
		double elapsed;
		clock_t s;
		clock_t e;

		s = clock();
		for (i = 3; i <= N; i++)
		{
			j = 2;
			while ((j * j <= i) && (i % j != 0))
				j++;
			if (i % j != 0)
				printf("%d ", i);
		}
		e = clock();
		elapsed = (double)(e - s) / (double)CLOCKS_PER_SEC;
		printf("\n\ntime=%f\n", elapsed);

		return (0);
	}

	Resultat :
		time = 0.073097
		real	0m0.094s
		user	0m0.073s
		sys	0m0.003s

	Reponse : Le resultat obtenu est idetique au temps "user".

Exercice 3

#1
	Code :

#include <unistd.h>

int	main(void)
{
	sleep(4);
	write(1, "au revoir\n", 11);
	return (0);
}

#2
	Code :

#include <unistd.h>

void	child(void)
{
	sleep(4);
	write(1, "fini\n", 5);
}

void	father(void)
{
	sleep(2);
	write(1, "bye\n", 4);
}
int	main(void)
{
	pid_t pid;

	pid = fork();
	switch (pid) {
		case -1:
			return (-1);
			break;
		case 0:
			child();
			break;
		default:
			father();
			break;
	}

	return (1);
}

	Reponse : Le pogramme se termine en affichant "bye" puis 2 sec plus tard,
		le mot "fini" s'affiche comme prevu.

#3
	Code :
#include <unistd.h>
#include <stdlib.h>

void	child(void)
{
	sleep(4);
	write(1, "fini\n", 5);
}

void	father(void)
{
	sleep(2);
	write(1, "bye\n", 4);
	abort(); // exit(1);
}
int	main(void)
{
	pid_t pid;

	pid = fork();
	switch (pid) {
		case -1:
			return (-1);
			break;
		case 0:
			child();
			break;
		default:
			father();
			break;
	}

	return (1);
}

	Reponse : Le resultat est similaire avec abort et exit a l'affiche pres
		(abort affiche un message).

#4
	Code :
#include <unistd.h>
#include <signal.h>

void	child(void)
{
	sleep(4);
	write(1, "fini\n", 5);
}

void	father(pid_t pid)
{
	sleep(2);
	write(1, "bye\n", 4);
	kill(pid, 1);
}
int	main(void)
{
	pid_t pid;

	pid = fork();
	switch (pid) {
		case -1:
			return (-1);
			break;
		case 0:
			child();
			break;
		default:
			father(pid);
			break;
	}

	return (1);
}

	Reponse : Le fils et tue, nous n'avons donc que l'affichage du pere.

#5
	Code :
#include <unistd.h>

void	child(void)
{
	sleep(4);
	write(1, "fini\n", 5);
}

void	father(pid_t pid)
{
	sleep(2);
	write(1, "bye\n", 4);
	execl("./toto");
}
int	main(void)
{
	pid_t pid;

	pid = fork();
	switch (pid) {
		case -1:
			return (-1);
			break;
		case 0:
			child();
			break;
		default:
			father(pid);
			break;
	}

	return (1);
}
	Reponse : Cela ressemble a une fork bomb je ne l'executerai donc pas mais il
	va boucler indefiniement.

#6
	

Exercice 4

#1
	Code :
#include <pthread.h>
#include <unistd.h>

static void	routine(void)
{
	for(int i = 0; i < 10; i++)
	{
		sleep(1);
		write(1,"Bonjour\n", 8);
	}
}

int	main(void)
{
	void	*p;

	p = routine;
	pthread_t t;
	pthread_create (&t, NULL, p, "");
	pthread_join(t, NULL);
	return (0);
}

#2
	Reponse : Le programme n'attends pas le thread et se termine casiment
		instantanement sans executer la routine.
